library(igraph)
library(tidyverse)
library(bipartite)
library(networkD3)
sp_occ <- read.table(file="data/egypt_data.txt", header = FALSE)
str(sp_occ)
sp_mass <- read.table(file="data/egypt_mass.txt", header=FALSE)
str(sp_mass)
row_labs_sp <- c("Canis aureus", "Vulpes vulpes", "Lycaon pictus", "Hyaena hyaena", "Crocuta crocuta", "Panthera leo (long maned)", "Panthera leo (short maned)", "Panthera pardus", "Acinonyx jubatus", "Loxodonta africana", "Equus asinus", "Equus grevyi", "Equus quagga", "Diceros/Ceratotherium", "Sus scrofa",  "Phacochoerus aethiopicus", "Hippopotamus amphibius", "Giraffa camelopardalis", "Dama mesopotamica", "Camelus dromedarius", "Taurotragus oryx", "Tragelaphus spekei", "Addax nasomaculatus", "Oryx dammah", "Oryx beisa", "Hippotragus equinus", "Kobus kob", "Kobus megaceros", "Alcelaphus bucelaphus", "Connochaetes taurinus", "Litocranius walleri", "Ammodorcas clarkei", "Gazella dorcas", "Gazella leptoceros", "Gazella soemmerringii", "Capra ibex", "Ammotragus lervia", "Bos primigenius", "Syncerus caffer")
## Set 1 for predators, 0 for prey
carnivores <- c(rep(1, 9), rep(0, length(row_labs_sp)- 9))
names(carnivores) <- row_labs_sp
rownames(species_occurrence_matrix) <- row_labs_sp
rownames(sp_occ) <- row_labs_sp
rownames(sp_mass) <- row_labs_sp
colnames(sp_mass) <- c("f", "m")
head(sp_occ)
head(sp_mass)
alpha <- 2.51
beta <- 0.79
gamma <- -0.37
inv_logit <- function(x) exp(x)/(1+exp(x))
probEat <- function(mi, mj, alpha, beta, gamma) {
# Calculate the log ratio squared
log_ratio_squared <- log(mi / mj)^2
# Compute the logit value
logit <- alpha + beta * log(mi / mj) + gamma * log_ratio_squared
# Compute the probability using the inverse logit
probability <- inv_logit(logit)
# Round the probability to two decimal places
round(probability, 2)
}
# Example usage
mi <- 10 # Predator body size
mj <- 2  # Prey body size
probEat(mi, mj, alpha, beta, gamma)
probEat <- function(mi, mj, a, b, y) {
# Calculate the log ratio squared
log_ratio_squared <- log(mi / mj)^2
# Compute the logit value
logit <- a + b * log(mi / mj) + y * log_ratio_squared
# Compute the probability using the inverse logit
probability <- inv_logit(logit)
# Round the probability to two decimal places
round(probability, 2)
}
# Example usage
mi <- 10 # Predator body size
mj <- 2  # Prey body size
probEat(mi, mj, alpha, beta, gamma)
probEat <- function(mi, mj, alpha, beta, gamma) {
log_squared <- log(mi / mj)^2
logit <- alpha + beta * log(mi / mj) + gamma * log_squared
prob <- inv_logit(logit)
round(prob, 2)
}
mi <- 10
mj <- 2
probEat(mi, mj, alpha, beta, gamma)
probEat <- function(mi, mj, alpha, beta, gamma) {
log_squared <- log(mi / mj)^2
logit <- alpha + beta * log(mi / mj) + gamma * log_squared
prob <- inv_logit(logit)
round(prob, 2)
}
mi <- 10
mj <- 2
probEat(mi, mj, alpha, beta, gamma)
probEat <- function(mi, mj, alpha, beta, gamma) {
log_squared <- log(mi / mj)^2
logit <- alpha + beta * log(mi / mj) + gamma * log_squared
prob <- inv_logit(logit)
round(prob, 2)
}
mi <- 10
mj <- 2
alpha <- 2.51
beta <- 0.79
gamma <- -0.37
probEat(mi, mj, alpha, beta, gamma)
# Initialize an empty adjacency matrix
adj_matrix <- matrix(0, nrow = nrow(sp_mass), ncol = nrow(sp_mass))
rownames(adj_matrix) <- row_labs_sp
colnames(adj_matrix) <- row_labs_sp
# Calculate feeding probabilities
for (i in 1:nrow(adj_matrix)) {
for (j in 1:ncol(adj_matrix)) {
adj_matrix[i, j] <- probEat(sp_mass$f[j], sp_mass$f[i], alpha, beta, gamma)
}
}
# Check the adjacency matrix
head(adj_matrix)
adj_matrix <- matrix(0, nrow = nrow(sp_mass), ncol = nrow(sp_mass))
rownames(adj_matrix) <- row_labs_sp
colnames(adj_matrix) <- row_labs_sp
for (i in 1:nrow(adj_matrix)) {
for (j in 1:ncol(adj_matrix)) {
adj_matrix[i, j] <- probEat(sp_mass$f[j], sp_mass$f[i], alpha, beta, gamma)
}
}
# Check the adjacency matrix
head(adj_matrix)
adj_matrix <- sweep(adj_matrix, 2, carnivores, `*`)
row_sums <- rowSums(adj_matrix)
col_sums <- colSums(adj_matrix)
print(row_sums)
print(col_sums)
probEat <- function(mi, mj, alpha, beta, gamma) {
log_squared <- log(mj / mi)^2
logit <- alpha + beta * log(mj / mi) + gamma * log_squared
prob <- inv_logit(logit)
round(prob, 2)
}
mi <- 10
mj <- 2
alpha <- 2.51
beta <- 0.79
gamma <- -0.37
probEat(mi, mj, alpha, beta, gamma)
adj_matrix <- sweep(adj_matrix, 2, carnivores, `*`)
row_sums <- rowSums(adj_matrix)
col_sums <- colSums(adj_matrix)
print(row_sums)
print(col_sums)
adj_matrix <- matrix(0, nrow = nrow(sp_mass), ncol = nrow(sp_mass))
rownames(adj_matrix) <- row_labs_sp
colnames(adj_matrix) <- row_labs_sp
for (i in 1:nrow(adj_matrix)) {
for (j in 1:ncol(adj_matrix)) {
adj_matrix[i, j] <- probEat(sp_mass$f[j], sp_mass$f[i], alpha, beta, gamma)
}
}
head(adj_matrix)
# Extract the second column of sp_occ
present_species <- sp_occ[, 2]
# Zero out rows and columns for species not present in time period 2
adj_matrix_time2 <- sweep(adj_matrix, 1, present_species, `*`)
adj_matrix_time2 <- sweep(adj_matrix_time2, 2, present_species, `*`)
# Use the 'empty' function to remove rows and columns with no interactions
library(bipartite)
adj_matrix_time2 <- empty(adj_matrix_time2)
# Check the number of rows and confirm it's 36
num_rows <- nrow(adj_matrix_time2)
print(num_rows)  # Should print 36
# Check the matrix
head(adj_matrix_time2)
present_species <- sp_occ[, 2]
adj_matrix_time2 <- sweep(adj_matrix, 1, present_species, `*`)
adj_matrix_time2 <- sweep(adj_matrix_time2, 2, present_species, `*`)
adj_matrix_time2 <- empty(adj_matrix_time2)
num_rows <- nrow(adj_matrix_time2)
print(num_rows)
head(adj_matrix_time2)
present_species <- sp_occ[, 2]
adj_matrix_time2 <- sweep(adj_matrix, 1, present_species, `*`)
adj_matrix_time2 <- sweep(adj_matrix_time2, 2, present_species, `*`)
adj_matrix_time2 <- empty(adj_matrix_time2)
num_rows <- nrow(adj_matrix_time2)
print(num_rows)
head(adj_matrix_time2)
library(knitr)
library(stringr)
out <- paste("My", "name", "is", "Lauren", ".", sep = " ")
strsplit(out, split = ' ')
nchar(out)
times <- c("04:18:04", "12:12:53", "13:47:00")
substring(times, 7, 8)
substring(times[3], 1, 2) <- '01'   ## replacement
times
dates <- c("2016-08-03", "2007-09-05", "2016-01-02")
grep("2016", dates)
grepl("2016", dates)
gregexpr("2016", dates)
gsub("2016", "16", dates)
# Match a single character present in the list below [:,\t.]
str_detect(text, "[:,\t.]")
text <- c("Here's my number: 919-543-3300.", "hi John, good to meet you",
"They bought 731 bananas", "Please call 919.554.3800")
pattern <- "[[:digit:]]{3}[-.][[:digit:]]{3}[-.][[:digit:]]{4}"
str_extract_all(text, pattern)
## matches <- gregexpr(pattern, text)
## regmatches(text, matches)
knitr::opts_chunk$set(echo = TRUE)
spec <- read.csv("specimens-complete.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr, warn.conflicts = FALSE)
library(readr)
library(tidyr)
spec <- read.csv("specimens-complete.csv")
species <- read.csv("specimens-complete.csv")
bee <- read.csv("bee.csv")
species <- read.csv("specimens-complete.csv")
bee <- read.csv("bee.csv")
OBA <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
species <- read.csv("specimens-complete.csv")
bee <- read.csv("bee.csv")
OBA <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr, warn.conflicts = FALSE)
library(readr)
library(tidyr)
species <- read.csv("specimens-complete.csv")
bee <- read.csv("bee.csv")
OBA <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
View(species)
species_trim <- species %>% select(BeeNonbee, PlantGenus, PlantSpecies, Site, GenusSpecies)
View(species_trim)
View(OBA)
